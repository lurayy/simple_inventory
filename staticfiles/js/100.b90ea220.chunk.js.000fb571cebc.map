{"version":3,"sources":["Pages/Roles/Create.js","App/components/Reusables/MarkBox.js","validation/role.js"],"names":["Create","props","React","useState","loading","setLoading","submitting","setSubmitting","powersArr","setPowersArr","powerValuesArr","setPowerValuesArr","name","description","roleData","setRoleData","errors","setErrors","useEffect","controller","AbortController","getPowers","action","signal","then","res","console","log","json","status","JSON","stringify","valid_powers","catch","err","abort","_roleDataChange","e","target","value","PowersList","map","instance","index","instanceName","replace","md","key","style","cursor","display","justifyContent","marginBottom","marginLeft","onClick","tempPowerValues","_toggle","className","lineHeight","toUpperCase","slice","Body","Group","Label","Control","onChange","type","placeholder","as","rows","fontSize","color","i","variant","history","push","disabled","validateRoleCreation","isValid","Jhilikka","fire","icon","title","background","requestJson","createRole","error","MarkBox","padding","margin","height","width","userData","isEmpty"],"mappings":"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","file":"static/js/100.b90ea220.chunk.js","sourcesContent":["import React from 'react';\nimport { Row, Col, Card, Form, Button, InputGroup, FormControl, DropdownButton, Dropdown } from 'react-bootstrap';\n\nimport Aux from \"../../hoc/_Aux\";\n\n\nimport ErrorBody from '../../App/components/Reusables/ErrorBody';\nimport Jhilikka from '../../App/components/Reusables/Jhilikka';\nimport { getPowers, createRole } from '../../api/userManagement/roles';\nimport Loader from '../../App/components/Reusables/Loader';\nimport MarkBox from '../../App/components/Reusables/MarkBox';\nimport { validateUserCreation } from '../../validation/user';\nimport { validateRoleCreation } from '../../validation/role';\n\n\n\nconst Create = (props) => {\n    const [loading, setLoading] = React.useState(true);\n    const [submitting, setSubmitting] = React.useState(false)\n    const [powersArr, setPowersArr] = React.useState([]);\n    const [powerValuesArr, setPowerValuesArr] = React.useState([])\n    const [roleData, setRoleData] = React.useState({\n        name: '',\n        description: '',\n    });\n\n    const [errors, setErrors] = React.useState({});\n\n    React.useEffect(() => {\n        const controller = new AbortController();\n        getPowers({ action: 'get' }, controller.signal)\n            .then(res => {\n                console.log(res)\n                if (res.json.status) {\n                    console.log(JSON.stringify(res.json.valid_powers))\n                    setPowersArr(res.json.valid_powers);\n                    setLoading(false)\n                }\n            })\n            .catch(err => {\n                console.log(err)\n            })\n        return () => controller.abort()\n    }, [])\n\n    const _roleDataChange = (e) => {\n        setErrors({ ...errors, [e.target.name]: '' })\n        setRoleData({\n            ...roleData,\n            [e.target.name]: e.target.value\n        })\n    }\n\n    const _markAll = () => {\n        const tempPowerValues = [...powerValuesArr];\n        for (let i in powersArr) {\n            tempPowerValues[i] = true;\n        }\n        setPowerValuesArr(tempPowerValues)\n    }\n\n    const _unmarkAll = () => {\n        const tempPowerValues = [...powerValuesArr];\n        for (let i in powersArr) {\n            tempPowerValues[i] = false;\n        }\n        setPowerValuesArr(tempPowerValues)\n    }\n\n\n    const _toggle = (index) => {\n        const tempPowerValues = [...powerValuesArr]\n        tempPowerValues[index] = !tempPowerValues[index];\n        setPowerValuesArr(tempPowerValues)\n    }\n\n    const _submit = () => {\n\n        const { isValid, errors } = validateRoleCreation(roleData);\n        if (!isValid) {\n\n            Jhilikka.fire({ icon: 'error', title: 'Fix errors and retry submission!', background: '#ffe5de' })\n            setErrors({ ...errors })\n            return;\n        };\n        setSubmitting(true)\n        //if no errros api call\n        const requestJson = {\n            \"action\": \"add\",\n            \"name\": roleData.name,\n            \"description\": roleData.description,\n            \"powers\": powersArr,\n            \"values\": powerValuesArr\n        }\n        createRole(requestJson)\n            .then((res) => {\n                console.log(res)\n                if (res.json.status) {\n                    Jhilikka.fire({ icon: 'success', title: 'Role created successfully!', background: '#dffff0' })\n                    props.history.push('/roles');\n                } else {\n                    setSubmitting(false)\n                    Jhilikka.fire({ icon: 'error', title: res.json.error, background: '#ffe5de' })\n                }\n            }).catch((err) => {\n                setSubmitting(false)\n                console.log(err)\n            });\n    }\n\n\n\n\n    const PowersList = powersArr.map((instance, index) => {\n        let instanceName = instance.replace(/_/g, ' ');\n        return <Col md={4} key={index}>\n            <div\n                style={{\n                    cursor: 'default',\n                    display: 'flex',\n                    justifyContent: 'flex-start',\n                    marginBottom: '8px',\n                    marginLeft: '2px',\n                }}\n                onClick={() => _toggle(index)}\n            >\n                <div className='mr-1'><MarkBox status={powerValuesArr[index]} /></div>\n                <div style={{ lineHeight: '21.25px' }}>{instanceName[0].toUpperCase() + instanceName.slice(1)}</div>\n            </div>\n\n        </Col>\n    })\n\n\n    if (loading) return <Loader />\n    return (\n        <Aux>\n            <Row>\n                <Col>\n                    <Card>\n                        <Card.Body>\n                            <h5>Create Role</h5>\n                            <hr />\n                            <Row>\n\n                                <Col md={12}>\n                                    <Form.Group  >\n                                        <Form.Label>Role Name*</Form.Label>\n                                        <Form.Control name=\"name\" value={roleData.name} onChange={_roleDataChange} type=\"text\" placeholder=\"Role Name\" />\n                                        <ErrorBody>{errors.name}</ErrorBody>\n                                    </Form.Group>\n                                </Col>\n\n                                <Col md={12}>\n                                    <Form.Group  >\n                                        <Form.Label>Description</Form.Label>\n                                        <Form.Control name=\"description\" as=\"textarea\" rows=\"6\" value={roleData.description} onChange={_roleDataChange} type=\"text\" placeholder=\"Description\" />\n                                        <ErrorBody>{errors.description}</ErrorBody>\n                                    </Form.Group>\n                                </Col>\n                            </Row>\n                            <br />\n                            <h5 style={{ fontSize: \"1.2em\" }}>Permissions</h5>\n                            <span className='mr-2' style={{ cursor: 'pointer', color: '#007bff', fontSize: '0.9em' }} onClick={_markAll}>Mark All</span>\n                            <span className='mr-2' style={{ cursor: 'pointer', color: '#007bff', fontSize: '0.9em' }} onClick={_unmarkAll}>Unmark All</span>\n                            <hr />\n                            <Row>\n                                {PowersList}\n                            </Row>\n                            <div className=\"d-flex justify-content-end\" >\n                                <Button\n                                    variant=\"warning\"\n                                    onClick={() => { props.history.push('/roles') }}\n                                >\n                                    Cancel\n                                    </Button>\n                                <Button\n                                    disabled={submitting}\n                                    variant=\"primary\"\n                                    onClick={_submit}\n                                >\n                                    {submitting ? <><i className=\"fa fa-spinner text-c-white f-15 fa-pulse m-l-1\"></i>Submitting</> : 'Submit'}\n                                </Button>\n                            </div>\n\n                        </Card.Body>\n                    </Card>\n                </Col>\n            </Row>\n        </Aux>\n    );\n}\n\nexport default Create;\n","\n\nimport React from 'react';\n\nconst MarkBox = (props) => {\n    const status = props.status;\n    return <button\n        className={status ? `btn btn-primary btn-sm` : `btn btn-outline-primary btn-sm`}\n        style={{ padding: '0px 3px', margin: 0, marginLeft: 0, height: '21.18px', width: '21.11px' }}\n    ><i className={`feather icon-${status ? 'check' : null} text-c-white f-8 m-0`} /></button>\n}\n\nexport default MarkBox;","import isEmpty from \"./isEmpty\"\n\n\nconst validateRoleCreation = (userData) => {\n    const errors = {}\n\n\n    if (isEmpty(userData.name)) {\n        errors.name = 'Name cannot be empty.'\n    }\n\n    //Will be valid if the errors are empty\n    const isValid = isEmpty(errors);\n    return { isValid, errors }\n}\n\n\nexport { validateRoleCreation }\n"],"sourceRoot":""}