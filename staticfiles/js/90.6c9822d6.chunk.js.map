{"version":3,"sources":["Pages/CustomerCategories/Create.js","App/components/Reusables/ErrorBody.js","api/inventory/vendorApi.js","api/sales/customerCategory.js","validation/customer.js"],"names":["Create","props","React","useState","submitting","setSubmitting","name","customerCategoryData","setCustomerCategoryData","errors","setErrors","Body","md","Group","Label","Control","value","onChange","e","console","log","target","type","placeholder","className","variant","onClick","history","push","isEmpty","requestJson","createCustomerCategory","then","res","json","status","Jhilikka","fire","icon","title","background","error","catch","err","ErrorBody","children","Text","style","color","getVendors","data","signal","a","baseRequest","alert","createVendor","deleteVendors","updateVendor","getVendor","getCustomerCategories","deleteCustomerCategories","updateCustomerCategory","getCustomerCategory","validateCustomerCreation","customerData","fname","lname","email","test","phone1","isValid"],"mappings":"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","file":"static/js/90.6c9822d6.chunk.js","sourcesContent":["import React from 'react';\nimport { Row, Col, Card, Form, Button, InputGroup, FormControl, DropdownButton, Dropdown } from 'react-bootstrap';\n\nimport Switch from \"react-switch\";\nimport Aux from \"../../hoc/_Aux\";\n\nimport { validateCustomerCreation } from '../../validation/customer';\nimport { createVendor } from '../../api/inventory/vendorApi';\n\nimport ErrorBody from '../../App/components/Reusables/ErrorBody';\nimport Jhilikka from '../../App/components/Reusables/Jhilikka';\nimport { getCustomerCategories, createCustomerCategory } from '../../api/sales/customerCategory';\nimport isEmpty from '../../validation/isEmpty';\n\nconst Create = (props) => {\n\n\n    const [submitting, setSubmitting] = React.useState(false)\n    const [customerCategoryData, setCustomerCategoryData] = React.useState({\n        name: ''\n    })\n\n\n    const [errors, setErrors] = React.useState({});\n\n\n    const amendErrorOf = (field) => {\n        setErrors({ ...errors, [field]: '' })\n    }\n\n    const _customerCategoryDataChange = (e) => {\n        console.log('chaing', e.target.value);\n        setErrors({ ...errors, [e.target.name]: '' })\n        setCustomerCategoryData({ ...customerCategoryData, [e.target.name]: e.target.value })\n    }\n\n\n\n    const _submit = () => {\n\n        if (isEmpty(customerCategoryData.name)) {\n            setErrors({ ...errors, name: 'Name cannot be empty!' });\n            return;\n        }\n\n        console.log('no errros');\n\n        setSubmitting(true)\n\n        //if no errros api call\n        const requestJson = {\n            \"action\": \"add\",\n            \"name\": customerCategoryData.name\n        }\n\n        createCustomerCategory(requestJson)\n            .then((res) => {\n                console.log(res)\n                if (res.json.status) {\n                    Jhilikka.fire({ icon: 'success', title: 'Customer created created successfully!', background: '#dffff0' })\n                    props.history.push('/customer-categories');\n                } else {\n                    Jhilikka.fire({ icon: 'error', title: res.json.error, background: \"#ffe5d6\" })\n\n                }\n            }).catch((err) => {\n                console.log(err)\n            });\n        setSubmitting(false)\n    }\n\n\n\n    return (\n        <Aux>\n            <Row>\n                <Col>\n                    <Card>\n                        <Card.Body>\n                            <h5>Create Customer Category</h5>\n                            <hr />\n\n                            <Row>\n                                <Col md={3}>\n                                </Col>\n                                <Col md={6}>\n                                    <Form.Group  >\n                                        <Form.Label>Name*</Form.Label>\n                                        <Form.Control name=\"name\" value={customerCategoryData.name} onChange={_customerCategoryDataChange} type=\"text\" placeholder=\"Category Name\" />\n                                        <ErrorBody>{errors.name}</ErrorBody>\n                                    </Form.Group>\n                                </Col>\n                                <Col md={3}>\n                                </Col>\n                            </Row>\n\n                            <div className=\"d-flex justify-content-end\" >\n                                <Button\n                                    variant=\"warning\"\n                                    onClick={() => { props.history.push('/customer-categories') }}\n                                >\n                                    Cancel\n                                    </Button>\n                                <Button\n                                    variant=\"primary\"\n                                    onClick={_submit}\n                                >\n                                    {submitting ? 'Submitting' : 'Submit'}\n                                </Button>\n                            </div>\n\n                        </Card.Body>\n                    </Card>\n                </Col>\n            </Row>\n        </Aux>\n    );\n}\n\nexport default Create;\n","import React from 'react';\n\nimport { Form } from 'react-bootstrap';\nimport isEmpty from '../../../validation/isEmpty'\n\nconst ErrorBody = (props) => {\n\n    if (isEmpty(props.children)) {\n        return <span></span>\n    }\n\n    return (\n        <>\n            <Form.Text style={{ color: 'red' }} >\n                {props.children}\n            </Form.Text>\n        </>\n    );\n}\n\n\nexport default ErrorBody;\n\n\n","import { baseRequest } from '../base';\n// api for vendors\n\nconst getVendors = async (data, signal) => {\n  try {\n    return await baseRequest('api/v1/inventory/vendors/get','POST', data, signal);\n  } catch(e){\n    alert(e)\n  }\n};\n\nconst createVendor = async (data, signal) => {\n    try {\n      return await baseRequest('api/v1/inventory/vendor/add','POST', data, signal);\n    } catch(e){\n      alert(e)\n    }\n};\n\n\nconst deleteVendors = async (data, signal) => {\n  try {\n    return await baseRequest('api/v1/inventory/vendors/delete','POST', data, signal);\n  } catch(e){\n    alert(e)\n  }\n};\n\n\nconst updateVendor = async (data, signal) => {\n  try {\n    return await baseRequest('api/v1/inventory/vendor/update','POST', data, signal);\n  } catch(e){\n    alert(e)\n  }\n};\n\nconst getVendor = async (data, signal) => {\n    try {\n      return await baseRequest('api/v1/inventory/vendor/get','POST', data, signal);\n    } catch(e){\n      alert(e)\n    }\n  };\n\nexport { getVendors, createVendor, deleteVendors, updateVendor, getVendor}","import { baseRequest } from '../base';\n// api for Invoices \n\nconst getCustomerCategories = async (data, signal) => {\n  try {\n    return await baseRequest('api/v1/sales/customers/category', 'POST', data, signal);\n  } catch (e) {\n    alert(e)\n  }\n};\n\n\nconst deleteCustomerCategories = async (data, signal) => {\n  try {\n    return await baseRequest('api/v1/sales/customers/category/delete', 'POST', data, signal);\n  } catch (e) {\n    alert(e)\n  }\n};\n\nconst updateCustomerCategory = async (data, signal) => {\n  try {\n    return await baseRequest('api/v1/sales/customers/category/update', 'POST', data, signal);\n  } catch (e) {\n    alert(e)\n  }\n};\n\n\nconst createCustomerCategory = async (data, signal) => {\n  try {\n    return await baseRequest('api/v1/sales/customers/category/add', 'POST', data, signal);\n  } catch (e) {\n    alert(e)\n  }\n};\n\n\nconst getCustomerCategory = async (data, signal) => {\n  try {\n    return await baseRequest('api/v1/sales/customers/category/get', 'POST', data, signal);\n  } catch (e) {\n    alert(e)\n  }\n};\n\nexport { getCustomerCategory, getCustomerCategories, createCustomerCategory, deleteCustomerCategories, updateCustomerCategory }\n","import isEmpty from \"./isEmpty\"\n\n\nconst validateCustomerCreation = (customerData) => {\n\n\n    const errors = {}\n\n    if (isEmpty(customerData.fname)) {\n        errors.fname = 'First Name cannot be empty.'\n    }\n    if (isEmpty(customerData.lname)) {\n        errors.lname = 'Last Name cannot be empty.'\n    }\n    \n    if (isEmpty(customerData.email)) {\n        errors.email = 'Email cannot be empty.'\n    }\n\n    if (customerData.email && !/^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$/.test(customerData.email)) {\n        errors.email = 'Email not valid.'\n\n    }\n    if (isEmpty(customerData.phone1)) {\n        errors.phone1 = 'Atleast, a phone number should be provided.'\n    }\n\n    //Will be valid if the errors are empty\n    const isValid = isEmpty(errors);\n    return { isValid, errors }\n}\n\nexport { validateCustomerCreation }"],"sourceRoot":""}