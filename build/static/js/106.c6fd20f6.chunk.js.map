{"version":3,"sources":["Pages/AccountTypes/AccountTypes.js","api/accounting/account.js"],"names":["AccountTypes","props","React","useState","accountTypesArr","setAccountTypesArr","loading","setLoading","showModal","accountTypeId","deleteData","setDeleteData","instanceCount","setInstanceCount","useEffect","controller","AbortController","getAccountTypes","getStartEnd","signal","then","res","console","log","json","status","account_types","count","Jhilikka","fire","icon","title","error","background","catch","err","abort","_delete","idToBeDeleted","deleteAccountTypes","action","account_type_ids","a","deleted","find","instance","id","tempArr","splice","indexOf","TaxesList","map","index","key","scope","name","toUpperCase","slice","header","is_active","className","style","cursor","onClick","history","push","_triggerDeleteModal","Body","striped","responsive","isEmpty","show","onCancel","onDelete","getTransactions","data","baseRequest","alert","getAccounts","deleteAccounts","createAccount","getAccount","closeAccount","updateAccount","createAccountType","updateAccountType"],"mappings":"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","file":"static/js/106.c6fd20f6.chunk.js","sourcesContent":["import React from 'react';\nimport { Row, Col, Card, Table, Modal, Button } from 'react-bootstrap';\n\nimport Aux from \"../../hoc/_Aux\";\n\nimport IsEmpty from '../../App/components/Reusables/IsEmpty';\nimport Loader from '../../App/components/Reusables/Loader';\nimport DeleteModal from '../../App/components/Reusables/DeleteModal';\nimport Jhilikka from '../../App/components/Reusables/Jhilikka';\nimport isEmpty from '../../validation/isEmpty';\nimport Spinner from '../../App/components/Reusables/Spinner';\nimport Paging from '../../App/components/Reusables/Paging';\nimport { getTaxes, deleteTaxes } from '../../api/misc';\nimport { getTaxesSearchFilterObject } from '../../helpers/getSearchFilterObject';\nimport TaxesFilter from '../../App/components/SearchFilters/TaxesFilter';\nimport { getStartEnd } from '../../helpers/getStartEnd';\nimport { deleteAccountTypes, getAccountTypes } from '../../api/accounting/account';\n\nconst AccountTypes = (props) => {\n    const [accountTypesArr, setAccountTypesArr] = React.useState([]);\n    const [loading, setLoading] = React.useState(true)\n    const [deleteData, setDeleteData] = React.useState({ showModal: false, accountTypeId: null });\n    const [instanceCount, setInstanceCount] = React.useState(0)\n\n    React.useEffect(() => {\n\n        const controller = new AbortController()\n\n        getAccountTypes({\n            \"action\": \"get\",\n            \"filter\": \"none\",\n            ...getStartEnd(props)\n        }, controller.signal)\n            .then((res) => {\n                console.log(res);\n                if (res.json.status) {\n                    console.log(res.json.account_types)\n                    setAccountTypesArr(res.json.account_types);\n                    setInstanceCount(res.json.count)\n                    setLoading(false);\n                } else { Jhilikka.fire({ icon: 'error', title: res.json.error, background: '#ffe5de' }) }\n            })\n            .catch((err) => {\n                console.log(err)\n            });\n        return () => controller.abort()\n    }, []);\n\n\n\n    const _triggerDeleteModal = (id) => {\n        setDeleteData({ showModal: true, accountTypeId: id });\n    }\n\n    const _delete = (idToBeDeleted) => {\n        deleteAccountTypes({ action: 'delete', account_type_ids: [idToBeDeleted] })\n            .then(async (res) => {\n                console.log(res.json)\n                if (res.json.status) {\n                    const deleted = accountTypesArr.find(instance => instance.id === idToBeDeleted);\n                    let tempArr = accountTypesArr;\n                    tempArr.splice(tempArr.indexOf(deleted), 1);\n                    await setAccountTypesArr([...tempArr])\n                    await setDeleteData({ ...setDeleteData, showModal: false, accountTypeId: null })\n                    Jhilikka.fire({ icon: 'success', title: 'Account type deleted successfully!', background: '#dffff0' })\n                } else {\n                    Jhilikka.fire({ icon: 'error', title: res.json.error, background: '#ffe5de' })\n                }\n            })\n            .catch((err) => {\n                console.log(err)\n            });\n    }\n\n\n    const TaxesList = accountTypesArr.map((instance, index) => {\n        return (\n            <tr key={index}>\n                <th scope=\"row\">{instance.id}</th>\n                <td>{instance.name[0].toUpperCase() + instance.name.slice(1)}</td>\n                <td>{instance.header}</td>\n                <td>{instance.is_active ? 'Yes' : 'No'}</td>\n                <td>\n                    <i\n                        className=\"feather icon-edit text-c-green f-19 m-r-10\"\n                        style={{ cursor: 'pointer' }}\n                        onClick={() => props.history.push('/account-type/update/' + instance.id)}\n                    />\n                    <i\n                        className=\"feather icon-trash-2 text-c-red f-19 m-r-5\"\n                        style={{ cursor: 'pointer' }}\n                        onClick={() => _triggerDeleteModal(instance.id)}\n                    />\n                </td>\n            </tr>\n        )\n    })\n\n    return (\n        <Aux>\n            <Row className=\"d-flex justify-content-between pageHead\" >\n                <h4 className=\"m-b-10\">Account Types</h4>\n                <div>\n                    <button\n                        className=\"btn btn-primary btn-sm shadow-2 mb-4\"\n                        onClick={() => props.history.push(`account-type/create`)}\n                    > <i className=\"fa fa-plus text-c-white f-15 m-r-5\" />Add New</button>\n                </div>\n            </Row>\n            <Row>\n                <Col>\n\n                    <Card>\n                        <Card.Body>\n                            <Table striped responsive>\n                                <thead>\n                                    <tr>\n                                        <th>#</th>\n                                        <th>Name</th>\n                                        <th>Header</th>\n                                        <th>Enabled</th>\n                                        <th></th>\n                                    </tr>\n                                </thead>\n                                <tbody>\n                                    {TaxesList || ''}\n                                </tbody>\n                            </Table>\n                            {isEmpty(accountTypesArr) && !loading ? <><IsEmpty>Data not available</IsEmpty><br /><br /></> : ''}\n                            {loading ? <Spinner /> : null}\n                            <Paging instanceCount={instanceCount} />\n\n                        </Card.Body>\n                    </Card >\n\n\n                    <DeleteModal\n                        show={deleteData.showModal}\n                        onCancel={() => setDeleteData({ ...deleteData, showModal: false })}\n                        onDelete={() => _delete(deleteData.accountTypeId)}\n                    />\n\n\n                </Col>\n            </Row>\n        </Aux>\n    );\n}\n\nexport default AccountTypes;","import { baseRequest } from '../base';\n\nconst getTransactions = async (data, signal) => {\n    try {\n        return await baseRequest('api/v1/accounting/account/transactions/get', 'POST', data, signal);\n    } catch (e) {\n        alert(e)\n    }\n}\n\n\n\nconst getAccounts = async (data, signal) => {\n    try {\n        return await baseRequest('api/v1/accounting/accounts/get', 'POST', data, signal);\n    } catch (e) {\n        alert(e)\n    }\n};\n\n\nconst deleteAccounts = async (data, signal) => {\n    try {\n        return await baseRequest('api/v1/accounting/accounts/delete', 'POST', data, signal);\n    } catch (e) {\n        alert(e)\n    }\n};\n\nconst createAccount = async (data, signal) => {\n    try {\n        return await baseRequest('api/v1/accounting/account/add', 'POST', data, signal);\n    } catch (e) {\n        alert(e)\n    }\n};\n\n\nconst getAccount = async (data, signal) => {\n    try {\n        return await baseRequest('api/v1/accounting/account/get', 'POST', data, signal);\n    } catch (e) {\n        alert(e)\n    }\n};\n\n\nconst closeAccount = async (data, signal) => {\n    try {\n        return await baseRequest('api/v1/accounting/account/update', 'POST', data, signal);\n    } catch (e) {\n        alert(e)\n    }\n};\n\nconst updateAccount = async (data, signal) => {\n    try {\n        return await baseRequest('api/v1/accounting/account/update', 'POST', data, signal);\n    } catch (e) {\n        alert(e)\n    }\n};\nconst getAccountStatus = async (data, signal) => {\n    try {\n        return await baseRequest('api/v1/sales/invoices/status', 'POST', data, signal);\n    } catch (e) {\n        alert(e)\n    }\n};\n\nconst getAccountTypes = async (data, signal) => {\n    try {\n        return await baseRequest('api/v1/accounting/accounts/types/get', 'POST', data, signal);\n    } catch (e) {\n        alert(e)\n    }\n}\nconst createAccountType = async (data, signal) => {\n    try {\n        return await baseRequest('api/v1/accounting/accounts/type/add', 'POST', data, signal);\n    } catch (e) {\n        alert(e)\n    }\n}\nconst updateAccountType = async (data, signal) => {\n    try {\n        return await baseRequest('api/v1/accounting/accounts/type/update', 'POST', data, signal);\n    } catch (e) {\n        alert(e)\n    }\n}\nconst deleteAccountTypes = async (data, signal) => {\n    try {\n        return await baseRequest('api/v1/accounting/accounts/types/delete', 'POST', data, signal);\n    } catch (e) {\n        alert(e)\n    }\n}\n\n\n\n\n\nexport {\n    getTransactions,\n    getAccountStatus,\n    getAccounts,\n    createAccount,\n    deleteAccounts,\n    closeAccount,\n    updateAccount,\n    getAccount,\n    getAccountTypes,\n    createAccountType,\n    updateAccountType,\n    deleteAccountTypes,\n\n}\n"],"sourceRoot":""}