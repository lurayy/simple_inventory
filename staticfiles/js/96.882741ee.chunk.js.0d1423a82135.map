{"version":3,"sources":["Pages/ItemCategories/Update.js","App/components/Reusables/ErrorBody.js","api/inventory/itemCategory.js","validation/items.js"],"names":["path","createPath","parent_tree","a","push","details","isEmpty","sub_categories","Update","props","React","useState","loading","setLoading","submitting","setSubmitting","itemCategory","setItemCategory","isActive","setIsActive","currentCats","setCurrentCats","selectedRoute","setSelectedRoute","errors","setErrors","useEffect","controller","AbortController","ladder","getItemCategory","action","item_category_id","match","params","id","signal","then","res","console","log","json","status","item_category","splice","length","Jhilikka","fire","icon","title","error","background","catch","err","getItemCatagories","filter","item_catagories","abort","requestJson","parentId","_change","e","field","preventDefault","target","name","value","selectedIndex","nativeEvent","selectedCategoryName","text","Body","md","Group","Label","Control","onChange","type","placeholder","style","display","justifyContent","cursor","onClick","padding","variant","as","disabled","map","item","index","key","margin","color","el","className","marginBottom","checked","history","parent","parseInt","is_active","updateItemCategory","ErrorBody","children","Text","data","baseRequest","alert","deleteItemCategory","addItemCategory","validateItemCreation","itemData","cp","sp","category","barcode","isValid","validateItemCategoryCreation","catName"],"mappings":"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","file":"static/js/96.882741ee.chunk.js","sourcesContent":["import React from 'react';\nimport { Row, Col, Card, Form, Button, InputGroup, FormControl, DropdownButton, Dropdown, Badge } from 'react-bootstrap';\n\nimport Switch from \"react-switch\";\nimport Aux from \"../../hoc/_Aux\";\n\nimport { validateItemCategoryCreation, validateItemCreation } from '../../validation/items';\nimport ErrorBody from '../../App/components/Reusables/ErrorBody';\nimport { getItemCatagories, getItemCategory, getItemCategoryTree, updateItemCategory } from '../../api/inventory/itemCategory';\nimport Jhilikka from '../../App/components/Reusables/Jhilikka';\nimport isEmpty from '../../validation/isEmpty';\nimport Loader from '../../App/layout/Loader';\n\n\n\nlet path = []\nconst createPath = async (parent_tree) => {\n    path.push(parent_tree.details[0])\n    if (!isEmpty(parent_tree.sub_categories)) {\n        createPath(parent_tree.sub_categories)\n    }\n    return;\n}\n\n\n\nconst Update = (props) => {\n\n\n    const [loading, setLoading] = React.useState(true)\n    const [submitting, setSubmitting] = React.useState(false)\n\n    const [itemCategory, setItemCategory] = React.useState({});\n    const [isActive, setIsActive] = React.useState(true);\n    const [currentCats, setCurrentCats] = React.useState([])\n    const [selectedRoute, setSelectedRoute] = React.useState([])\n\n    const [errors, setErrors] = React.useState({});\n\n    //Did mount\n    React.useEffect(() => {\n        const controller = new AbortController();\n        (async () => {\n            let ladder = 0;\n            await getItemCategory({ action: 'get', item_category_id: props.match.params.id }, controller.signal)\n                .then(async (res) => {\n                    console.log(res)\n                    if (res.json.status) {\n                        setItemCategory(res.json.item_category[0])\n                        createPath(res.json.parent_tree)\n                        path.splice(path.length - 1, 1)\n                        await setSelectedRoute(path)\n                        path = []\n                        ladder++;\n                    } else { Jhilikka.fire({ icon: 'error', title: res.json.error, background: '#ffe5de' }) }\n                }).catch((err) => {\n                    console.log(err);\n                });\n\n            await getItemCatagories({ 'action': 'get', 'start': 0, 'end': 200, filter: 'parent' }, controller.signal)\n                .then(async res => {\n                    console.log(res);\n                    if (res.json.status) {\n                        await setCurrentCats(res.json.item_catagories)\n                        ladder++;\n                    } else { Jhilikka.fire({ icon: 'error', title: res.json.error, background: '#ffe5de' }) }\n                }).catch(err => {\n                    console.log(err);\n                })\n\n            if (ladder == 2) {\n                setLoading(false)\n            }\n        })()\n        return () => controller.abort();\n    }, []);\n\n\n    //Get child categories\n    React.useEffect(() => {\n        //Get the child categories of selected category\n        if (selectedRoute.length > 0) {\n            const requestJson = {\n                action: 'get',\n                item_category_id: selectedRoute.length > 0 ? selectedRoute[selectedRoute.length - 1].id : null\n            }\n\n            getItemCategory(requestJson)\n                .then(async (res) => {\n                    console.log(res)\n                    if (res.json.status) {\n                        await setCurrentCats([...res.json.sub_categories]);\n                        await setItemCategory({ ...itemCategory, parentId: '' })\n                    } else { Jhilikka.fire({ icon: 'error', title: res.json.error, background: '#ffe5de' }) }\n                }).catch((err) => {\n                    console.log(err)\n                });\n        }\n\n    }, [selectedRoute])\n\n    const amendErrorOf = (field) => {\n        setErrors({ ...errors, [field]: '' })\n    }\n\n    const _change = (e) => {\n        e.preventDefault();\n        amendErrorOf(e.target.name);\n        setItemCategory({\n            ...itemCategory,\n            [e.target.name]: e.target.value\n        });\n\n        if (e.target.name === 'parentId') {\n            // setGenuineParentId(e.target.value)\n            var selectedIndex = e.nativeEvent.target.selectedIndex;\n            const selectedCategoryName = e.nativeEvent.target[selectedIndex].text\n            setSelectedRoute([...selectedRoute, { id: e.target.value, name: selectedCategoryName }])\n        }\n    }\n\n    const _activeChange = (checked) => {\n        console.log(checked);\n        setIsActive(checked)\n    }\n\n    const _reset = () => {\n        setSelectedRoute([]);\n        setItemCategory({ ...itemCategory, parentId: '' })\n        setCurrentCats([...[]]);\n\n        getItemCatagories({ 'action': 'get', 'start': 0, 'end': 200, filter: 'parent' })\n            .then(async res => {\n                console.log(res);\n                if (res.json.status) {\n                    setCurrentCats(res.json.item_catagories)\n                } else { Jhilikka.fire({ icon: 'error', title: res.json.error, background: '#ffe5de' }) }\n            })\n            .catch(err => {\n                console.log(err);\n            })\n    }\n\n    const _update = () => {\n\n\n        //check if there are errors\n        if (isEmpty(itemCategory.name)) {\n            setErrors({ ...errors, name: \"Item category name can\\'t be empty.\" });\n            return;\n        };\n\n        const requestJson = {\n            action: 'update',\n            name: itemCategory.name,\n            item_category_id: itemCategory.id,\n            parent: selectedRoute.length > 0 ? parseInt(selectedRoute[selectedRoute.length - 1].id) : null,\n            is_active: isActive\n        }\n\n        console.log(requestJson.parent, itemCategory.id);\n\n        if (requestJson.parent === itemCategory.id) {\n            setErrors({ ...errors, parentId: \"One can\\'t be parent category of itself.\" });\n            return\n        }\n\n\n        setSubmitting(true)\n\n        updateItemCategory(requestJson)\n            .then((res) => {\n                console.log(res)\n                if (res.json.status) {\n                    Jhilikka.fire({ icon: 'success', title: 'Item Category updated successfully!', background: '#dffff0' })\n                    props.history.push('/item-category/' + itemCategory.id)\n                } else {\n                    setSubmitting(false)\n                    Jhilikka.fire({ icon: 'error', title: res.json.error, background: '#ffe5de' })\n                }\n            }).catch((err) => {\n                setSubmitting(false)\n                console.log(err)\n            });\n\n\n    }\n\n\n    console.log('to be sent is', itemCategory.name, selectedRoute.length > 0 ? selectedRoute[selectedRoute.length - 1].id : null)\n    // console.log(selectedRoute)\n\n    if (loading) return <Loader />\n    return (\n        <Aux>\n            <Row>\n                <Col>\n                    <Card>\n                        <Card.Body>\n                            <h5>Create Item Category</h5>\n                            <hr />\n                            <Row>\n                                <Col md={6}>\n\n                                    <Form.Group  >\n                                        <Form.Label>Category Name*</Form.Label>\n                                        <Form.Control name=\"name\" value={itemCategory.name} onChange={_change} type=\"text\" placeholder=\"Category Name\" />\n                                        <ErrorBody>{errors.name}</ErrorBody>\n                                    </Form.Group>\n                                </Col>\n\n                                <Col md={6}>\n                                    <Form.Group >\n                                        <div style={{ display: 'flex', justifyContent: 'space-between' }}>\n                                            <Form.Label>Update Parent Category</Form.Label>\n                                            <div\n                                                style={{ cursor: 'pointer' }}\n                                                onClick={_reset}\n                                            >\n                                                <Badge style={{ padding: '3px 8px 5px' }} variant=\"primary\">Reset</Badge>\n                                            </div>\n                                        </div>\n\n\n                                        <Form.Control name=\"parentId\" value={''} onChange={_change} as=\"select\">\n\n                                            <option value='' disabled >Select Parent Category</option>\n\n                                            {currentCats.map((item, index) => {\n                                                return <option key={index} value={item.id}>{item.name}</option>\n                                            })}\n                                        </Form.Control>\n\n\n                                        {/* --------------------catcrumb---------------- */}\n                                        <div style={{ margin: '4px 3px 4px 3px', color: '#42768a' }}>\n                                            {selectedRoute.map((el, index) => {\n\n                                                return (<div key={index} style={{ display: 'inline' }} >\n                                                    <span key={index} >\n                                                        {el.name}\n                                                    </span>\n                                                    {!(index === selectedRoute.length - 1) ?\n                                                        (< i className=\"feather icon-chevron-right text-c-white f-15 \" />) :\n                                                        null}\n                                                </div>);\n                                            })}\n                                        </div>\n                                        {/* --------------------catcrumb---------------- */}\n\n                                        <ErrorBody>{errors.parentId}</ErrorBody>\n                                    </Form.Group>\n\n\n\n                                </Col>\n                                <Col md={12}>\n                                    <Form.Group className=\"d-flex flex-column justify-content-end\">\n                                        <Form.Label style={{ marginBottom: '15px' }}>Is Active?</Form.Label>\n                                        <Switch onChange={_activeChange} checked={isActive} />\n                                    </Form.Group>\n                                </Col>\n                                <Col md={2}></Col>\n\n\n                            </Row>\n                            <div className=\"d-flex justify-content-end\" >\n                                <Button\n                                    variant=\"warning\"\n                                    onClick={() => { props.history.push('/item-categories') }}\n                                >\n                                    Cancel\n                                    </Button>\n                                <Button\n                                    disabled={submitting}\n                                    variant=\"primary\"\n                                    onClick={_update}\n                                >\n                                    {submitting ? <><i className=\"fa fa-spinner text-c-white f-15 fa-pulse m-l-1\"></i>Updating</> : 'Update'}\n                                </Button>\n                            </div>\n\n                        </Card.Body>\n                    </Card>\n                </Col>\n            </Row>\n        </Aux >\n    );\n}\n\nexport default Update;\n","import React from 'react';\n\nimport { Form } from 'react-bootstrap';\nimport isEmpty from '../../../validation/isEmpty'\n\nconst ErrorBody = (props) => {\n\n    if (isEmpty(props.children)) {\n        return <span></span>\n    }\n\n    return (\n        <>\n            <Form.Text style={{ color: 'red' }} >\n                {props.children}\n            </Form.Text>\n        </>\n    );\n}\n\n\nexport default ErrorBody;\n\n\n","import { baseRequest } from '../base';\n// api for items \n\n\n\nconst getWeightUnit = async (data, signal) => {\n  try {\n    return await baseRequest('api/v1/inventory/items/categories/get', 'POST', data, signal);\n  } catch (e) {\n    alert(e)\n  }\n};\n\n\n\n\nconst getItemCatagories = async (data, signal) => {\n  try {\n    return await baseRequest('api/v1/inventory/items/categories/get', 'POST', data, signal);\n  } catch (e) {\n    alert(e)\n  }\n};\n\n\n\nconst deleteItemCategory = async (data, signal) => {\n  try {\n    return await baseRequest('api/v1/inventory/items/categories/delete', 'POST', data, signal);\n  } catch (e) {\n    alert(e)\n  }\n};\n\nconst addItemCategory = async (data, signal) => {\n  try {\n    return await baseRequest('api/v1/inventory/items/category/add', 'POST', data, signal);\n  } catch (e) {\n    alert(e)\n  }\n};\n\n\nconst getItemCategory = async (data, signal) => {\n  try {\n    return await baseRequest('api/v1/inventory/items/category/get', 'POST', data, signal);\n  } catch (e) {\n    alert(e)\n  }\n};\n\n\nconst getItemCategoryTree = async (data, signal) => {\n  try {\n    return await baseRequest('api/v1/inventory/items/category/get', 'POST', data, signal);\n  } catch (e) {\n    alert(e)\n  }\n}\n\nconst updateItemCategory = async (data, signal) => {\n  try {\n    return await baseRequest('api/v1/inventory/items/category/update', 'POST', data, signal);\n  } catch (e) {\n    alert(e)\n  }\n};\n\nexport {\n  getWeightUnit,\n  getItemCatagories,\n  deleteItemCategory,\n  addItemCategory,\n  getItemCategory,\n  updateItemCategory,\n  getItemCategoryTree\n}\n","import isEmpty from \"./isEmpty\"\n\n\nconst validateItemCreation = (itemData) => {\n    const errors = {}\n\n\n    if (isEmpty(itemData.name)) {\n        errors.name = 'Item Name cannot be empty.'\n    }\n    if (isEmpty(itemData.cp)) {\n        errors.cp = 'Cost Price can\\'t be empty.'\n    }\n    if (isEmpty(itemData.sp)) {\n        errors.sp = 'Sales Price can\\'t be empty.'\n    }\n    if (isEmpty(itemData.category)) {\n        errors.category = 'Item must have a category.'\n    }\n\n\n    if (isEmpty(itemData.barcode)) {\n        errors.barcode = 'Barcode field can\\'t be empty.'\n    }\n\n    //Will be valid if the errors are empty\n    const isValid = isEmpty(errors);\n    return { isValid, errors }\n}\n\nconst validateItemCategoryCreation = (itemCategory) => {\n    const errors = {}\n\n    if (isEmpty(itemCategory.catName)) {\n        errors.catName = 'Category Name cannot be empty.'\n    }\n\n    //Will be valid if the errors are empty\n    const isValid = isEmpty(errors);\n    return { isValid, errors }\n}\nexport { validateItemCreation, validateItemCategoryCreation }\n"],"sourceRoot":""}