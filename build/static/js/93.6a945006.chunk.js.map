{"version":3,"sources":["Pages/CustomerCategories/Update.js","App/components/Reusables/ErrorBody.js","App/components/Reusables/Loader.js","api/sales/customerCategory.js"],"names":["Update","props","React","useState","loading","setLoading","submitting","setSubmitting","id","name","isActive","customerCategoryData","setCustomerCategoryData","errors","setErrors","useEffect","controller","AbortController","getCustomerCategory","action","customer_category_id","match","params","signal","then","res","console","log","json","status","customerCategory","customerCategories","is_active","Jhilikka","fire","icon","title","error","background","catch","err","abort","Body","md","Group","Label","Control","value","onChange","e","target","type","placeholder","className","style","marginBottom","checked","variant","onClick","history","push","isEmpty","requestJson","updateCustomerCategory","ErrorBody","children","Text","color","Loader","getCustomerCategories","data","a","baseRequest","alert","deleteCustomerCategories","createCustomerCategory"],"mappings":"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","file":"static/js/93.6a945006.chunk.js","sourcesContent":["import React from 'react';\nimport { Row, Col, Card, Form, Button, InputGroup, FormControl, DropdownButton, Dropdown } from 'react-bootstrap';\n\nimport Switch from \"react-switch\";\nimport Aux from \"../../hoc/_Aux\";\n\nimport Loader from '../../App/components/Reusables/Loader'\nimport ErrorBody from '../../App/components/Reusables/ErrorBody';\nimport Jhilikka from '../../App/components/Reusables/Jhilikka';\nimport { getCustomerCategory, updateCustomerCategory } from '../../api/sales/customerCategory';\nimport isEmpty from '../../validation/isEmpty';\n\nconst Update = (props) => {\n\n    const [loading, setLoading] = React.useState(true)\n    const [submitting, setSubmitting] = React.useState(false)\n    const [customerCategoryData, setCustomerCategoryData] = React.useState({\n        id: '',\n        name: '',\n        isActive: true,\n\n    })\n\n\n    const [errors, setErrors] = React.useState({});\n\n    React.useEffect(() => {\n        const controller = new AbortController();\n        getCustomerCategory({ action: 'get', customer_category_id: props.match.params.id }, controller.signal)\n            .then((res) => {\n                console.log(res)\n                if (res.json.status) {\n                    const customerCategory = res.json.customerCategories[0]\n                    setCustomerCategoryData({\n                        ...customerCategoryData,\n                        id: customerCategory.id,\n                        name: customerCategory.name,\n                        isActive: customerCategory.is_active\n                    });\n                    setLoading(false)\n                } else {\n                    Jhilikka.fire({ icon: 'error', title: res.json.error, background: '#ffe5de' })\n                }\n            }).catch((err) => {\n                console.log(err)\n            });\n\n        return () => controller.abort();\n    }, [])\n\n\n    const amendErrorOf = (field) => {\n        setErrors({ ...errors, [field]: '' })\n    }\n\n    const _customerCategoryDataChange = (e) => {\n        setErrors({ ...errors, [e.target.name]: '' })\n        setCustomerCategoryData({ ...customerCategoryData, [e.target.name]: e.target.value })\n    }\n\n    const _activeChange = (checked) => {\n        setCustomerCategoryData({ ...customerCategoryData, isActive: checked })\n    }\n\n\n\n    const _submit = () => {\n\n        if (isEmpty(customerCategoryData.name)) {\n            setErrors({ ...errors, name: 'Name cannot be empty!' });\n            return;\n        }\n\n        console.log('no errros');\n\n        setSubmitting(true)\n\n        //if no errros api call\n        const requestJson = {\n            \"action\": \"update\",\n            \"customer_category_id\": customerCategoryData.id,\n            \"name\": customerCategoryData.name,\n            \"is_active\": customerCategoryData.isActive\n        }\n        console.log(requestJson);\n        updateCustomerCategory(requestJson)\n            .then((res) => {\n                console.log(res)\n                if (res.json.status) {\n                    setSubmitting(false)\n                    Jhilikka.fire({ icon: 'success', title: 'Customer category updated successfully!', background: '#dffff0' })\n                    props.history.push('/customer-categories');\n                } else {\n                    setSubmitting(false);\n                    Jhilikka.fire({ icon: 'error', title: res.json.error, background: \"#ffe5d6\" })\n\n                }\n            }).catch((err) => {\n                setSubmitting(false)\n                console.log(err)\n            });\n    }\n\n    console.log(customerCategoryData);\n\n    if (loading) return <Loader />\n    return (\n        <Aux>\n            <Row>\n                <Col>\n                    <Card>\n                        <Card.Body>\n                            <h5>Create Customer Category</h5>\n                            <hr />\n\n                            <Row>\n                                <Col md={6}>\n                                    <Form.Group  >\n                                        <Form.Label>Name*</Form.Label>\n                                        <Form.Control name=\"name\" value={customerCategoryData.name} onChange={_customerCategoryDataChange} type=\"text\" placeholder=\"Category Name\" />\n                                        <ErrorBody>{errors.name}</ErrorBody>\n                                    </Form.Group>\n                                </Col>\n                                <Col md={6}>\n                                    <Form.Group className=\"d-flex flex-column justify-content-end\">\n                                        <Form.Label style={{ marginBottom: '15px' }}>Is Active?</Form.Label>\n                                        <Switch onChange={_activeChange} checked={customerCategoryData.isActive} />\n                                    </Form.Group>\n                                </Col>\n                            </Row>\n\n                            <div className=\"d-flex justify-content-end\" >\n                                <Button\n                                    variant=\"warning\"\n                                    onClick={() => { props.history.push('/customer-categories') }}\n                                >\n                                    Cancel\n                                    </Button>\n                                <Button\n                                    variant=\"primary\"\n                                    onClick={_submit}\n                                >\n                                    {submitting ? 'Submitting' : 'Submit'}\n                                </Button>\n                            </div>\n\n                        </Card.Body>\n                    </Card>\n                </Col>\n            </Row>\n        </Aux>\n    );\n}\n\nexport default Update;\n","import React from 'react';\n\nimport { Form } from 'react-bootstrap';\nimport isEmpty from '../../../validation/isEmpty'\n\nconst ErrorBody = (props) => {\n\n    if (isEmpty(props.children)) {\n        return <span></span>\n    }\n\n    return (\n        <>\n            <Form.Text style={{ color: 'red' }} >\n                {props.children}\n            </Form.Text>\n        </>\n    );\n}\n\n\nexport default ErrorBody;\n\n\n","import React from 'react';\n\nconst Loader = () => {\n    return (\n        <div className=\"loader-bg\">\n            <div className=\"loader-track\">\n                <div className=\"loader-fill\"/>\n            </div>\n        </div>\n    );\n};\n\nexport default Loader;","import { baseRequest } from '../base';\n// api for Invoices \n\nconst getCustomerCategories = async (data, signal) => {\n  try {\n    return await baseRequest('api/v1/sales/customers/category', 'POST', data, signal);\n  } catch (e) {\n    alert(e)\n  }\n};\n\n\nconst deleteCustomerCategories = async (data, signal) => {\n  try {\n    return await baseRequest('api/v1/sales/customers/category/delete', 'POST', data, signal);\n  } catch (e) {\n    alert(e)\n  }\n};\n\nconst updateCustomerCategory = async (data, signal) => {\n  try {\n    return await baseRequest('api/v1/sales/customers/category/update', 'POST', data, signal);\n  } catch (e) {\n    alert(e)\n  }\n};\n\n\nconst createCustomerCategory = async (data, signal) => {\n  try {\n    return await baseRequest('api/v1/sales/customers/category/add', 'POST', data, signal);\n  } catch (e) {\n    alert(e)\n  }\n};\n\n\nconst getCustomerCategory = async (data, signal) => {\n  try {\n    return await baseRequest('api/v1/sales/customers/category/get', 'POST', data, signal);\n  } catch (e) {\n    alert(e)\n  }\n};\n\nexport { getCustomerCategory, getCustomerCategories, createCustomerCategory, deleteCustomerCategories, updateCustomerCategory }\n"],"sourceRoot":""}