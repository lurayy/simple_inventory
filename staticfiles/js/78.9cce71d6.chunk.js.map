{"version":3,"sources":["Pages/AccountTypes/Update.js","App/components/Reusables/ErrorBody.js","api/misc.js","helpers/getStartEnd.js","api/accounting/account.js","validation/tax.js","validation/account.js"],"names":["Create","props","React","useState","submitting","setSubmitting","name","header","isActive","accountTypeData","setAccountTypeData","errors","setErrors","useEffect","controller","AbortController","getAccountTypes","match","params","id","getStartEnd","signal","then","res","console","log","json","status","accountType","account_types","is_active","Jhilikka","fire","icon","title","error","background","catch","err","abort","_accountTypeDataChange","e","target","value","Body","md","Group","Label","Control","onChange","type","placeholder","as","disabled","className","style","marginBottom","checked","variant","onClick","history","push","validateAccountTypeCreation","isValid","requestJson","JSON","stringify","updateAccountType","ErrorBody","isEmpty","children","Text","color","getDiscounts","data","a","baseRequest","alert","deleteDiscounts","createDiscount","getDiscount","updateDiscount","getTaxes","deleteTaxes","createTax","getTax","updateTax","getPurchaseOrderStatus","getPlacements","createPlacement","deletePlacement","updatePlacement","getCountries","queryParams","URLSearchParams","location","search","parseInt","get","getTransactions","getAccounts","deleteAccounts","createAccount","getAccount","closeAccount","updateAccount","createAccountType","deleteAccountTypes","validateTaxCreation","taxData","rate","validateAccountCreation","accountData","openingBalance","openingDate","toISOString","linkedWith","partyId","hasParent","parentId"],"mappings":"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","file":"static/js/78.9cce71d6.chunk.js","sourcesContent":["import React from 'react';\nimport { Row, Col, Card, Form, Button, InputGroup, FormControl, DropdownButton, Dropdown } from 'react-bootstrap';\n\nimport Aux from \"../../hoc/_Aux\";\nimport Switch from 'react-switch';\n\n\nimport ErrorBody from '../../App/components/Reusables/ErrorBody';\nimport Jhilikka from '../../App/components/Reusables/Jhilikka';\nimport { validateTaxCreation } from '../../validation/tax';\nimport { createTax } from '../../api/misc';\nimport { validateAccountTypeCreation } from '../../validation/account';\nimport { updateAccountType, getAccountTypes } from '../../api/accounting/account';\nimport { getStartEnd } from '../../helpers/getStartEnd';\n\nconst Create = (props) => {\n\n    const [submitting, setSubmitting] = React.useState(false)\n    const [accountTypeData, setAccountTypeData] = React.useState({\n        name: '',\n        header: '',\n        isActive: true,\n    })\n    const [errors, setErrors] = React.useState({});\n\n    React.useEffect(() => {\n\n        const controller = new AbortController();\n        getAccountTypes({\n            \"action\": \"get\",\n            \"filter\": \"id\",\n            \"id\": props.match.params.id,\n            ...getStartEnd(props)\n        }, controller.signal)\n            .then((res) => {\n                console.log(res);\n                if (res.json.status) {\n                    const accountType = res.json.account_types[0];\n                    setAccountTypeData({\n                        ...accountTypeData,\n                        id: accountType.id,\n                        name: accountType.name,\n                        header: accountType.header,\n                        isActive: accountType.is_active,\n                    })\n                } else { Jhilikka.fire({ icon: 'error', title: res.json.error, background: '#ffe5de' }) }\n            })\n            .catch((err) => {\n                console.log(err)\n            });\n\n        return () => controller.abort();\n    }, [])\n\n\n    const _accountTypeDataChange = (e) => {\n        setErrors({ ...errors, [e.target.name]: '' })\n        setAccountTypeData({\n            ...accountTypeData,\n            [e.target.name]: e.target.value\n        })\n    }\n\n    const _activeChange = (checked) => {\n        console.log(checked);\n        setAccountTypeData({ ...accountTypeData, isActive: checked })\n    }\n\n\n    const _submit = () => {\n\n        const { isValid, errors } = validateAccountTypeCreation(accountTypeData);\n\n        if (!isValid) {\n            console.log(errors);\n            setErrors({ ...errors })\n            return;\n        };\n\n        setSubmitting(true)\n        //if no errros api call\n        const requestJson = {\n            \"action\": \"update\",\n            \"account_type_id\": accountTypeData.id,\n            \"header\": accountTypeData.header,\n            \"name\": accountTypeData.name,\n            \"status\": {\n                \"is_active\": accountTypeData.isActive\n            }\n        }\n        console.log(JSON.stringify(requestJson));\n        updateAccountType(requestJson)\n            .then((res) => {\n                if (res.json.status) {\n                    Jhilikka.fire({ icon: 'success', title: 'Account type created successfully!', background: '#dffff0' })\n                    props.history.push('/account-types');\n                } else {\n                    setSubmitting(false)\n                    Jhilikka.fire({ icon: 'error', title: res.json.error, background: '#ffe5de' })\n                }\n            }).catch((err) => {\n                setSubmitting(false)\n                console.log(err)\n            });\n    }\n\n\n\n    return (\n        <Aux>\n            <Row>\n                <Col>\n                    <Card>\n                        <Card.Body>\n                            <h5>Create Account Type</h5>\n                            <hr />\n                            <Row>\n                                <Col md={6}>\n                                    <Form.Group  >\n                                        <Form.Label>Account Type Name*</Form.Label>\n                                        <Form.Control name=\"name\" value={accountTypeData.name} onChange={_accountTypeDataChange} type=\"text\" placeholder=\"Type Name\" />\n                                        <ErrorBody>{errors.name}</ErrorBody>\n                                    </Form.Group>\n                                </Col>\n                                <Col md={6}>\n\n                                    <Form.Group  >\n                                        <Form.Label>Header*</Form.Label>\n                                        <Form.Control name=\"header\" value={accountTypeData.header} onChange={_accountTypeDataChange} as=\"select\">\n\n                                            <option value='' disabled >Select...</option>\n                                            <option value='assets'  >Assets</option>\n                                            <option value='liabilities'  >Liabilities</option>\n                                            <option value='expense'  >Expense</option>\n                                            <option value='revenue'  >Revenue</option>\n                                            <option value='draw'  >Draw</option>\n                                            <option value='equity'  >Equity</option>\n                                        </Form.Control>\n                                        <ErrorBody>{errors.header}</ErrorBody>\n                                    </Form.Group>\n                                </Col>\n                                <Col md={6}>\n                                    <Form.Group className=\"d-flex flex-column justify-content-end\">\n                                        <Form.Label style={{ marginBottom: '15px' }}>Is Active?</Form.Label>\n                                        <Switch onChange={_activeChange} checked={accountTypeData.isActive} />\n                                    </Form.Group>\n                                </Col>\n\n\n                            </Row>\n                            <div className=\"d-flex justify-content-end\" >\n                                <Button\n                                    variant=\"warning\"\n                                    onClick={() => { props.history.push('/account-types') }}\n                                >\n                                    Cancel\n                                    </Button>\n                                <Button\n                                    disabled={submitting}\n                                    variant=\"primary\"\n                                    onClick={_submit}\n                                >\n                                    {submitting ? <><i className=\"fa fa-spinner text-c-white f-15 fa-pulse m-l-1\"></i>Updating</> : 'Update'}\n                                </Button>\n                            </div>\n\n                        </Card.Body>\n                    </Card>\n                </Col>\n            </Row>\n        </Aux>\n    );\n}\n\nexport default Create;\n","import React from 'react';\n\nimport { Form } from 'react-bootstrap';\nimport isEmpty from '../../../validation/isEmpty'\n\nconst ErrorBody = (props) => {\n\n    if (isEmpty(props.children)) {\n        return <span></span>\n    }\n\n    return (\n        <>\n            <Form.Text style={{ color: 'red' }} >\n                {props.children}\n            </Form.Text>\n        </>\n    );\n}\n\n\nexport default ErrorBody;\n\n\n","import { baseRequest } from './base';\n\n\nconst getDiscounts = async (data, signal) => {\n  try {\n    return await baseRequest('api/v1/sales/discounts/get', 'POST', data, signal);\n  } catch (e) {\n    alert(e)\n  }\n};\n\n\nconst deleteDiscounts = async (data, signal) => {\n  try {\n    return await baseRequest('api/v1/sales/discounts/delete', 'POST', data, signal);\n  } catch (e) {\n    alert(e)\n  }\n};\n\nconst createDiscount = async (data, signal) => {\n  try {\n    return await baseRequest('api/v1/sales/discount/add', 'POST', data, signal);\n  } catch (e) {\n    alert(e)\n  }\n};\n\n\nconst getDiscount = async (data, signal) => {\n  try {\n    return await baseRequest('api/v1/sales/discount/get', 'POST', data, signal);\n  } catch (e) {\n    alert(e)\n  }\n};\n\nconst updateDiscount = async (data, signal) => {\n  try {\n    return await baseRequest('api/v1/sales/discount/update', 'POST', data, signal);\n  } catch (e) {\n    alert(e)\n  }\n};\n\n\n\nconst getTaxes = async (data, signal) => {\n  try {\n    return await baseRequest('api/v1/sales/taxes/get', 'POST', data, signal);\n  } catch (e) {\n    alert(e)\n  }\n};\n\n\nconst deleteTaxes = async (data, signal) => {\n  try {\n    return await baseRequest('api/v1/sales/taxes/delete', 'POST', data, signal);\n  } catch (e) {\n    alert(e)\n  }\n};\n\nconst createTax = async (data, signal) => {\n  try {\n    return await baseRequest('api/v1/sales/tax/add', 'POST', data, signal);\n  } catch (e) {\n    alert(e)\n  }\n};\n\n\nconst getTax = async (data, signal) => {\n  try {\n    return await baseRequest('api/v1/sales/tax/get', 'POST', data, signal);\n  } catch (e) {\n    alert(e)\n  }\n};\n\nconst updateTax = async (data, signal) => {\n  try {\n    return await baseRequest('api/v1/sales/tax/update', 'POST', data, signal);\n  } catch (e) {\n    alert(e)\n  }\n};\n\nconst getPurchaseOrderStatus = async (data, signal) => {\n  try {\n    return await baseRequest('api/v1/inventory/purchaseorders/status', 'POST', data, signal);\n  } catch (e) {\n    alert(e)\n  }\n};\n\n\nconst getPlacements = async (data, signal) => {\n  try {\n    return await baseRequest('api/v1/inventory/placements/get', 'POST', data, signal);\n  } catch (e) {\n    alert(e)\n  }\n};\n\n\nconst getPlacement = async (data, signal) => {\n  try {\n    return await baseRequest('api/v1/inventory/placement/get', 'POST', data, signal);\n  } catch (e) {\n    alert(e)\n  }\n};\n\nconst createPlacement = async (data, signal) => {\n  try {\n    return await baseRequest('api/v1/inventory/placements/assign', 'POST', data, signal);\n  } catch (e) {\n    alert(e)\n  }\n}\n\nconst deletePlacement = async (data, signal) => {\n  try {\n    return await baseRequest('api/v1/inventory/placements/assign', 'POST', data, signal);\n  } catch (e) {\n    alert(e)\n  }\n}\n\nconst updatePlacement = async (data, signal) => {\n  try {\n    return await baseRequest('api/v1/inventory/placements/assign', 'POST', data, signal);\n  } catch (e) {\n    alert(e)\n  }\n}\n\n\nconst getExportFields = async (data, signal) => {\n  try {\n    return await baseRequest('api/v1/inventory/export', 'POST', data, signal);\n  } catch (e) {\n    alert(e)\n  }\n}\n\nconst getExport = async (data, signal) => {\n  try {\n    return await baseRequest('api/v1/inventory/export', 'POST', data, signal);\n  } catch (e) {\n    alert(e)\n  }\n}\n\n\nconst getCountries = async (data, signal) => {\n  try {\n    return await baseRequest('api/v1/user/countries/get ', 'POST', data, signal);\n  } catch (e) {\n    alert(e)\n  }\n}\n\n\n\n\n\nexport {\n  getExport,\n  getExportFields,\n\n  getPlacements,\n  getPlacement,\n  createPlacement,\n  updatePlacement,\n  deletePlacement,\n  getPurchaseOrderStatus,\n  getDiscounts,\n  createDiscount,\n  deleteDiscounts,\n  updateDiscount,\n  getDiscount,\n  getTaxes,\n  createTax,\n  deleteTaxes,\n  updateTax,\n  getTax,\n\n  getCountries,\n}\n","export function getStartEnd(props) {\n    const queryParams = new URLSearchParams(props.location.search);\n    return {\n        \"start\": parseInt(queryParams.get('start')) || 0,\n        \"end\": (parseInt(queryParams.get('end')) || 25),\n    }\n}","import { baseRequest } from '../base';\n\nconst getTransactions = async (data, signal) => {\n    try {\n        return await baseRequest('api/v1/accounting/account/transactions/get', 'POST', data, signal);\n    } catch (e) {\n        alert(e)\n    }\n}\n\n\n\nconst getAccounts = async (data, signal) => {\n    try {\n        return await baseRequest('api/v1/accounting/accounts/get', 'POST', data, signal);\n    } catch (e) {\n        alert(e)\n    }\n};\n\n\nconst deleteAccounts = async (data, signal) => {\n    try {\n        return await baseRequest('api/v1/accounting/accounts/delete', 'POST', data, signal);\n    } catch (e) {\n        alert(e)\n    }\n};\n\nconst createAccount = async (data, signal) => {\n    try {\n        return await baseRequest('api/v1/accounting/account/add', 'POST', data, signal);\n    } catch (e) {\n        alert(e)\n    }\n};\n\n\nconst getAccount = async (data, signal) => {\n    try {\n        return await baseRequest('api/v1/accounting/account/get', 'POST', data, signal);\n    } catch (e) {\n        alert(e)\n    }\n};\n\n\nconst closeAccount = async (data, signal) => {\n    try {\n        return await baseRequest('api/v1/accounting/account/update', 'POST', data, signal);\n    } catch (e) {\n        alert(e)\n    }\n};\n\nconst updateAccount = async (data, signal) => {\n    try {\n        return await baseRequest('api/v1/accounting/account/update', 'POST', data, signal);\n    } catch (e) {\n        alert(e)\n    }\n};\nconst getAccountStatus = async (data, signal) => {\n    try {\n        return await baseRequest('api/v1/sales/invoices/status', 'POST', data, signal);\n    } catch (e) {\n        alert(e)\n    }\n};\n\nconst getAccountTypes = async (data, signal) => {\n    try {\n        return await baseRequest('api/v1/accounting/accounts/types/get', 'POST', data, signal);\n    } catch (e) {\n        alert(e)\n    }\n}\nconst createAccountType = async (data, signal) => {\n    try {\n        return await baseRequest('api/v1/accounting/accounts/type/add', 'POST', data, signal);\n    } catch (e) {\n        alert(e)\n    }\n}\nconst updateAccountType = async (data, signal) => {\n    try {\n        return await baseRequest('api/v1/accounting/accounts/type/update', 'POST', data, signal);\n    } catch (e) {\n        alert(e)\n    }\n}\nconst deleteAccountTypes = async (data, signal) => {\n    try {\n        return await baseRequest('api/v1/accounting/accounts/types/delete', 'POST', data, signal);\n    } catch (e) {\n        alert(e)\n    }\n}\n\n\n\n\n\nexport {\n    getTransactions,\n    getAccountStatus,\n    getAccounts,\n    createAccount,\n    deleteAccounts,\n    closeAccount,\n    updateAccount,\n    getAccount,\n    getAccountTypes,\n    createAccountType,\n    updateAccountType,\n    deleteAccountTypes,\n\n}\n","import isEmpty from \"./isEmpty\"\n\n\nconst validateTaxCreation = (taxData) => {\n\n\n    const errors = {}\n\n\n    if (isEmpty(taxData.name)) {\n        errors.name = 'Name of tax cannot be empty!'\n    }\n    if (isEmpty(taxData.type)) {\n        errors.type = 'Provide type of tax!'\n    }\n    if (isEmpty(taxData.rate)) {\n        errors.rate = 'Provide rate of tax!'\n    }\n\n\n    //Will be valid if the errors are empty\n    const isValid = isEmpty(errors);\n    return { isValid, errors }\n}\n\nexport { validateTaxCreation }","import isEmpty from \"./isEmpty\"\n\n\nconst validateAccountCreation = (accountData) => {\n    const errors = {}\n    if (isEmpty(accountData.name)) {\n        errors.name = 'Provide name of account!'\n    }\n    if (isEmpty(accountData.type)) {\n        errors.type = 'Provide type of account!'\n    }\n    if (isEmpty(accountData.openingBalance)) {\n        errors.openingBalance = 'Provide opening balance of account!'\n    }\n    if (isEmpty(accountData.openingDate.toISOString())) {\n        errors.openingDate = 'Provide opening date of account!'\n    }\n\n\n    if (!isEmpty(accountData.linkedWith) && isEmpty(accountData.partyId)) {\n        errors.partyId = `Select the ${accountData.linkedWith}!`\n    }\n\n\n\n    if (accountData.hasParent && isEmpty(accountData.parentId)) {\n        errors.parentId = 'Parent must be selected!'\n    }\n\n    //Will be valid if the errors are empty\n    const isValid = isEmpty(errors);\n    return { isValid, errors }\n}\n\n\n\nconst validateAccountTypeCreation = (accountTypeData) => {\n    const errors = {}\n    if (isEmpty(accountTypeData.name)) {\n        errors.name = 'Provide name of account type!'\n    }\n    if (isEmpty(accountTypeData.header)) {\n        errors.header = 'Provide header of the account type!'\n    }\n    //Will be valid if the errors are empty\n    const isValid = isEmpty(errors);\n    return { isValid, errors }\n}\n\nexport { validateAccountCreation, validateAccountTypeCreation }"],"sourceRoot":""}