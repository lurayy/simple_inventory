{"version":3,"sources":["Pages/Places/Update.js","App/components/Reusables/ErrorBody.js","App/components/Reusables/Loader.js","api/inventory/placeApi.js"],"names":["Create","props","React","useState","loading","setLoading","submitting","setSubmitting","name","id","isActive","placeData","setPlaceData","errors","setErrors","useEffect","controller","AbortController","getPlace","action","place_id","match","params","signal","then","res","a","console","log","json","status","place","is_active","Jhilikka","fire","icon","title","error","background","catch","err","abort","Body","md","Group","Label","Control","value","onChange","e","target","type","placeholder","className","style","marginBottom","checked","variant","onClick","history","push","disabled","isEmpty","requestJson","updatePlace","ErrorBody","children","Text","color","Loader","getPlaces","data","baseRequest","alert","deletePlaces","createPlace"],"mappings":"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","file":"static/js/94.dfb43904.chunk.js","sourcesContent":["import React from 'react';\nimport { Row, Col, Card, Form, Button, InputGroup, FormControl, DropdownButton, Dropdown } from 'react-bootstrap';\n\nimport Switch from 'react-switch'\n\nimport ErrorBody from '../../App/components/Reusables/ErrorBody';\nimport Jhilikka from '../../App/components/Reusables/Jhilikka';\nimport isEmpty from '../../validation/isEmpty';\nimport { createPlace, updatePlace, getPlace } from '../../api/inventory/placeApi';\nimport Loader from '../../App/components/Reusables/Loader';\n\nconst Create = (props) => {\n\n\n    const [loading, setLoading] = React.useState(true);\n    const [submitting, setSubmitting] = React.useState(false)\n    const [placeData, setPlaceData] = React.useState({\n        name: '',\n        id: null,\n        isActive: false,\n    })\n\n\n    const [errors, setErrors] = React.useState({});\n\n    React.useEffect(() => {\n        const controller = new AbortController();\n        getPlace({\n            action: 'get',\n            place_id: props.match.params.id\n        }, controller.signal)\n            .then(async (res) => {\n                console.log(res)\n                if (res.json.status) {\n                    const place = res.json.place\n                    setPlaceData({\n                        id: place.id,\n                        isActive: place.is_active,\n                        name: place.name\n                    })\n                    setLoading(false)\n                } else { Jhilikka.fire({ icon: 'error', title: res.json.error, background: '#ffe5de' }) }\n            }).catch((err) => {\n                console.log(err);\n            });\n        return () => controller.abort()\n    }, [])\n\n    const _placeDataChange = (e) => {\n        setErrors({ ...errors, [e.target.name]: '' })\n        setPlaceData({ ...placeData, [e.target.name]: e.target.value })\n    }\n\n    const _activeChange = (checked) => {\n        console.log(checked);\n        setPlaceData({ ...placeData, isActive: checked })\n    }\n\n    const _update = () => {\n\n        if (isEmpty(placeData.name)) {\n            setErrors({ ...errors, name: 'Place name cannot be empty!' });\n            return;\n        }\n\n        console.log('no errros');\n\n        setSubmitting(true)\n        //if no errros api call\n        const requestJson = {\n            \"action\": \"update\",\n            \"place_id\": placeData.id,\n            \"name\": placeData.name,\n            \"is_active\": placeData.isActive\n        }\n        console.log(requestJson)\n\n        updatePlace(requestJson)\n            .then((res) => {\n                console.log(res)\n                if (res.json.status) {\n                    Jhilikka.fire({ icon: 'success', title: 'Place Update successfully!', background: '#dffff0' })\n                    props.history.push('/place/' + props.match.params.id);\n                } else {\n                    setSubmitting(false)\n                    Jhilikka.fire({ icon: 'error', title: res.json.error, background: \"#ffe5d6\" })\n                }\n            }).catch((err) => {\n                console.log(err)\n                setSubmitting(false)\n            });\n    }\n\n    if (loading) return <Loader />\n    return (\n        <>\n            <Row>\n                <Col>\n                    <Card>\n                        <Card.Body>\n                            <h5>Create Place</h5>\n                            <hr />\n\n                            <Row>\n                                <Col md={6}>\n                                    <Form.Group  >\n                                        <Form.Label>Name*</Form.Label>\n                                        <Form.Control name=\"name\" value={placeData.name} onChange={_placeDataChange} type=\"text\" placeholder=\"Place Name\" />\n                                        <ErrorBody>{errors.name}</ErrorBody>\n                                    </Form.Group>\n                                </Col>\n\n                                <Col md={6}>\n                                    <Form.Group className=\"d-flex flex-column justify-content-end\">\n                                        <Form.Label style={{ marginBottom: '15px' }}>Is Active?</Form.Label>\n                                        <Switch onChange={_activeChange} checked={placeData.isActive} />\n                                    </Form.Group>\n                                </Col>\n\n                            </Row>\n\n                            <div className=\"d-flex justify-content-end\" >\n                                <Button\n                                    variant=\"warning\"\n                                    onClick={() => { props.history.push('/places') }}\n                                >\n                                    Cancel\n                                    </Button>\n                                <Button\n                                    disabled={submitting}\n                                    variant=\"primary\"\n                                    onClick={_update}\n                                >\n                                    {submitting ? <><i className=\"fa fa-spinner text-c-white f-15 fa-pulse m-l-1\"></i>Updating</> : 'Update'}\n\n                                </Button>\n                            </div>\n\n                        </Card.Body>\n                    </Card>\n                </Col>\n            </Row>\n        </>\n    );\n}\n\n\nexport default Create;","import React from 'react';\n\nimport { Form } from 'react-bootstrap';\nimport isEmpty from '../../../validation/isEmpty'\n\nconst ErrorBody = (props) => {\n\n    if (isEmpty(props.children)) {\n        return <span></span>\n    }\n\n    return (\n        <>\n            <Form.Text style={{ color: 'red' }} >\n                {props.children}\n            </Form.Text>\n        </>\n    );\n}\n\n\nexport default ErrorBody;\n\n\n","import React from 'react';\n\nconst Loader = () => {\n    return (\n        <div className=\"loader-bg\">\n            <div className=\"loader-track\">\n                <div className=\"loader-fill\"/>\n            </div>\n        </div>\n    );\n};\n\nexport default Loader;","import { baseRequest } from '../base';\n// api for items \n\nconst getPlaces = async (data, signal) => {\n    try {\n      return await baseRequest('api/v1/inventory/places/get','POST', data, signal);\n    } catch(e){\n      alert(e)\n    }\n  };\n  \n  \n  const deletePlaces = async (data, signal) => {\n    try {\n      return await baseRequest('api/v1/inventory/places/delete','POST', data, signal);\n    } catch(e){\n      alert(e)\n    }\n  };\n  \n  const createPlace = async (data, signal) => {\n      try {\n        return await baseRequest('api/v1/inventory/place/add','POST', data, signal);\n      } catch(e){\n        alert(e)\n      }\n  };\n  \n  \n  const getPlace = async (data, signal) => {\n    try {\n      return await baseRequest('api/v1/inventory/place/get','POST', data, signal);\n    } catch(e){\n      alert(e)\n    }\n  };\n  \n  const updatePlace = async (data, signal) => {\n    try {\n      return await baseRequest('api/v1/inventory/place/update','POST', data, signal);\n    } catch(e){\n      alert(e)\n    }\n  };\n\n  const assignPlace = async (data, signal) => {\n    try { \n      return await  baseRequest('api/v1/inventory/places/assign','POST', data, signal);\n    } catch (e){\n      alert(e)\n    }\n  }\n  \nexport {getPlaces, createPlace, deletePlaces, updatePlace, getPlace, assignPlace}\n  "],"sourceRoot":""}