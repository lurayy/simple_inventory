{"version":3,"sources":["api/inventory/barcode.js","Pages/Barcode/Barcode.js","validation/barcode.js","App/components/Reusables/ErrorBody.js"],"names":["generateBarcode","data","signal","a","baseRequest","alert","Create","props","React","useState","generating","setGenerating","count","barcodeData","setBarcodeData","images","setImages","errors","setErrors","Images","map","instance","index","Col","key","className","md","xl","xs","sm","Image","src","image","style","display","height","minWidth","width","objectFit","margin","alt","barcode","Row","Card","Body","Form","Group","Label","Control","name","value","onChange","e","target","type","parseFloat","placeholder","ErrorBody","Button","variant","onClick","history","push","disabled","isEmpty","Number","isInteger","console","log","isValid","validateBarcodeGeneration","requestJson","then","res","json","status","barcode_images","Jhilikka","fire","icon","title","background","error","catch","err","zip","JSZip","barcodes","folder","Date","getTime","img","file","base64","generateAsync","content","saveAs","children","Text","color"],"mappings":"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","file":"static/js/104.22a8f707.chunk.js","sourcesContent":["import { baseRequest } from '../base';\n// api for items \n\nconst generateBarcode = async (data, signal) => {\n    try {\n      return await baseRequest('api/v1/inventory/generate','POST', data, signal);\n    } catch(e){\n      alert(e)\n    }\n  };\n  \n  \nexport {\n    generateBarcode\n}\n  ","import React from 'react';\nimport { Row, Col, Card, Form, Button, InputGroup, FormControl, DropdownButton, Dropdown, Image } from 'react-bootstrap';\n\nimport Aux from \"../../hoc/_Aux\";\n\n\nimport ErrorBody from '../../App/components/Reusables/ErrorBody';\nimport Jhilikka from '../../App/components/Reusables/Jhilikka';\nimport { validateBarcodeGeneration } from '../../validation/barcode';\nimport { generateBarcode } from '../../api/inventory/barcode';\nimport isEmpty from '../../validation/isEmpty';\nimport JSZip from 'jszip';\nimport { saveAs } from 'file-saver';\n\nconst Create = (props) => {\n\n    const [generating, setGenerating] = React.useState(false);\n    const [barcodeData, setBarcodeData] = React.useState({\n        count: 1,\n    });\n\n    const [images, setImages] = React.useState([]);\n    const [errors, setErrors] = React.useState({});\n\n\n    const _barcodeDataChange = (e) => {\n        const { type, name, value } = e.target;\n\n        setErrors({ ...errors, [name]: '' })\n        setBarcodeData({\n            ...barcodeData,\n            [e.target.name]: (type === 'number' ? parseFloat(value) : value) || ''\n        })\n    }\n\n\n    const _submit = () => {\n\n        const { isValid, errors } = validateBarcodeGeneration(barcodeData);\n\n        if (!isValid) {\n            console.log(errors);\n            setErrors({ ...errors })\n            return;\n        };\n\n        console.log('no errros');\n\n\n        //if no errros api call\n        const requestJson = {\n            'action': 'create',\n            'type': 'barcode',\n            'count': barcodeData.count\n        }\n        console.log(requestJson);\n        setGenerating(true);\n        generateBarcode(requestJson)\n            .then((res) => {\n                console.log(res)\n                setGenerating(false);\n                if (res.json.status) {\n\n                    console.log(res.json.barcode_images);\n                    setImages([...res.json.barcode_images])\n                    Jhilikka.fire({ icon: 'success', title: 'Barcodes generated successfully!', background: '#dffff0' })\n                    // props.history.push('/taxes');\n                } else {\n                    Jhilikka.fire({ icon: 'error', title: res.json.error, background: '#ffe5de' })\n                }\n            }).catch((err) => {\n                setGenerating(false);\n                console.log(err)\n            });\n    }\n\n    const _downloadImages = () => {\n\n\n\n\n        var zip = new JSZip();\n        var barcodes = zip.folder(`barcodes${(new Date()).getTime() % 1000000}`);\n        for (let img of images) {\n            // zip.file(\"Hello.txt\", \"Hello World\\n\");\n            barcodes.file(`${img.barcode}.png`, img.image, { base64: true });\n        }\n        zip.generateAsync({ type: \"blob\" })\n            .then(function (content) {\n                saveAs(content, `barcodes${(new Date()).getTime() % 1000000}.zip`);\n            });\n    }\n\n\n    const Images = images.map((instance, index) => {\n        return <Col key={index} className=\"mb-2\" md={3} xl={2} xs={12} sm={4}>\n            <Image\n                src={`data:image/png;base64,${instance.image}`}\n                style={{ display: 'block', height: '46px', minWidth: '40px', width: '160px', objectFit: 'cover', margin: 'auto' }}\n                alt=\"...\" />\n            <div className=\"text-center font-weight-bold\" >{instance.barcode}</div>\n        </Col>\n    })\n\n    return (\n        <Aux>\n            <Row>\n                <Col>\n                    <Card>\n                        <Card.Body>\n                            <h5>Generate Barcodes</h5>\n                            <hr />\n                            <Row>\n                                <Col md={7}>\n                                    <Form.Group  >\n                                        <Form.Label>No of barcodes to generate*</Form.Label>\n                                        <Form.Control name=\"count\" value={barcodeData.count} onChange={_barcodeDataChange} type=\"number\" placeholder=\"How many to generate?\" />\n                                        <ErrorBody>{errors.count}</ErrorBody>\n                                    </Form.Group>\n                                </Col>\n                                <Col md={5}>\n                                    <Form.Label> &nbsp; </Form.Label>\n                                    <div className=\"d-flex justify-content-end\" >\n                                        <Button\n                                            variant=\"warning\"\n                                            onClick={() => { props.history.push('/dashboard') }}\n                                        >\n                                            Cancel\n                                    </Button>\n                                        <Button\n                                            disabled={generating}\n                                            variant=\"primary\"\n                                            onClick={_submit}\n                                        >\n                                            {generating ? <><i className=\"fa fa-spinner text-c-white f-15 fa-pulse m-l-1\"></i>Generating...</> : 'Generate'}\n                                        </Button>\n                                    </div>\n\n                                </Col>\n                                <Col md={12}>\n\n                                    {generating ? `Please, Don't go to other page while generating the barcodes.` : null}\n\n                                </Col>\n\n                            </Row>\n\n\n\n\n\n                        </Card.Body>\n                    </Card>\n\n                    {!isEmpty(images) ?\n                        <Card>\n                            <Card.Body>\n                                <Row className=\"d-flex justify-content-between pageHead\" >\n                                    <h4 className=\"m-b-10\" >Generated Codes</h4>\n                                    <div>\n                                        <button\n                                            className=\"btn btn-primary btn-sm mb-5\"\n                                            onClick={_downloadImages}\n                                        >\n                                            <i className=\"fa fa-download text-c-white f-15 m-r-5\" />\n                                            Download All\n                                        </button>\n                                    </div>\n\n                                </Row>\n                                <Row>\n                                    {Images}\n                                </Row>\n                            </Card.Body>\n                        </Card> :\n                        null\n                    }\n                </Col>\n            </Row>\n        </Aux>\n    );\n}\n\nexport default Create;\n","import isEmpty from \"./isEmpty\"\n\n\nconst validateBarcodeGeneration = (barcodeData) => {\n\n\n    const errors = {}\n\n\n    if (isEmpty(barcodeData.count)) {\n        errors.count = 'Count cannot be empty!'\n    }\n\n    if (!isEmpty(barcodeData.count) && barcodeData.count < 1) {\n        errors.count = 'Count cannot be less than 1!'\n    }\n\n    if (!isEmpty(barcodeData.count) && !Number.isInteger(barcodeData.count)) {\n        console.log(Number.isInteger(3))\n        errors.count = 'Count must be a fixed number!'\n    }\n\n    if (!isEmpty(barcodeData.count) && barcodeData.count > 200) {\n        errors.count = 'Count cannot be greater than 200!'\n    }\n\n\n    //Will be valid if the errors are empty\n    const isValid = isEmpty(errors);\n    return { isValid, errors }\n}\n\nexport { validateBarcodeGeneration }","import React from 'react';\n\nimport { Form } from 'react-bootstrap';\nimport isEmpty from '../../../validation/isEmpty'\n\nconst ErrorBody = (props) => {\n\n    if (isEmpty(props.children)) {\n        return <span></span>\n    }\n\n    return (\n        <>\n            <Form.Text style={{ color: 'red' }} >\n                {props.children}\n            </Form.Text>\n        </>\n    );\n}\n\n\nexport default ErrorBody;\n\n\n"],"sourceRoot":""}